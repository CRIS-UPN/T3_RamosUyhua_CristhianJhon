@{
    ViewData["Title"] = "LibrosDiseñoSoftware";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html lang="es">
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <style>
        .title {
            text-align: center;
            font-size: 50px;
            margin-top: 20px;
            color: #FF0000
        }

        .subtitle {
            text-align: left;
            font-size: 36px;
            margin-top: 10px;
            color: #0000FF
        }

        .content-container {
            display: flex;
            align-items: flex-start;
            margin-top: 20px;
        }

        .image-container {
            flex: 0 0 auto;
            margin-right: 20px;
        }

        .paragraph {
            text-align: justify;
            font-size: 30px;
            flex: 1;
        }
    </style>
</head>
<body>
    <div class="title">
        Libros de Diseño de Software
    </div>

    <div class="subtitle">
        Diseño basado en dominios: abordar la complejidad en el corazón del software
    </div>
    <div class="content-container">
        <div class="image-container">
            <img src="~/images/DisenoSoftware1.jpg" alt="Imagen referencial" />
        </div>
        <div class="paragraph">
            Eric Evans, líder intelectual en diseño de software y fundador de Domain Language, proporciona un enfoque sistemático para el diseño basado en dominios, presentando 
            un amplio conjunto de mejores prácticas de diseño, técnicas basadas en la experiencia y principios fundamentales que facilitan el desarrollo de proyectos de software que 
            enfrentan dominios complejos. . Este libro, que entrelaza el diseño de sistemas y la práctica de desarrollo, incorpora numerosos ejemplos basados ​​en proyectos reales
            para ilustrar la aplicación del diseño basado en dominios al modelado y desarrollo de software del mundo real.

        </div>
    </div>

    <div class="subtitle">
        Una filosofía del diseño de software
    </div>
    <div class="content-container">
        <div class="image-container">
            <img src="~/images/DisenoSoftware2.jpg" alt="Imagen referencial" />
        </div>
        <div class="paragraph">
            Este libro aborda el tema del diseño de software: cómo descomponer sistemas de software complejos en módulos (como clases y métodos) que se pueden implementar de forma relativamente independiente.
            El libro presenta primero el problema fundamental en el diseño de software, que es la gestión de la complejidad. Luego analiza cuestiones filosóficas sobre cómo abordar el proceso de diseño de software 
            y presenta una colección de principios de diseño para aplicar durante el diseño de software. El libro también presenta una serie de señales de alerta que identifican problemas de diseño. Puede aplicar 
            las ideas de este libro para minimizar la complejidad de los grandes sistemas de software, de modo que pueda escribir software de forma más rápida y económica.
        </div>
    </div>

    <div class="subtitle">
        Diseño de software C++: principios y patrones de diseño para software de alta calidad
    </div>
    <div class="content-container">
        <div class="image-container">
            <img src="~/images/DisenoSoftware3.jpg" alt="Imagen referencial" />
        </div>
        <div class="paragraph">
            n buen diseño de software es esencial para el éxito de su proyecto, pero diseñar software es difícil de lograr. Es necesario tener un conocimiento profundo de las consecuencias de las decisiones de diseño 
            y una buena visión general de las alternativas de diseño disponibles. Con este libro, los desarrolladores experimentados de C++ obtendrán una descripción general completa, práctica e incomparable del 
            diseño de software con este lenguaje moderno. Klaus Iglberger, formador y consultor de C++, explica cómo se pueden gestionar dependencias y abstracciones, mejorar la capacidad de cambio y extensibilidad de 
            las entidades de software y aplicar e implementar patrones de diseño modernos para ayudarle a aprovechar las posibilidades actuales. El diseño es el aspecto más esencial de un proyecto de software porque afecta 
            las propiedades más importantes del software: mantenibilidad, cambiabilidad y extensibilidad.
        </div>
    </div>
</body>
</html>



